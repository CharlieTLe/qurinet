#!/bin/bash
########################################################################
#
# Description : custom network script
#
# Authors     :
#
# Version     : 00.00
#
# Notes       :
#
########################################################################

. /boot/variables.conf
. /etc/netd/netd.conf.site$SITENO

hostname site$SITENO

function getfreq()
{
	CHAN=$1
	MODE=$2
	echo "Translating into freq channel $CHAN mode $MODE"
	if [ $MODE = "11g" ]; then
		freq=`iw phy phy0 info | grep MHz | grep "\[$CHAN\]" | awk -F' ' '{if($2 < 5000) print $2 }'`
	fi

	if [ $MODE = "11a" ]; then
		freq=`iw phy phy0 info | grep MHz | grep "\[${CHAN}\]" | awk -F' ' '{if($2 > 5000) print $2 }'`
	fi

	
	return $freq
}

function wifi_destroy()
{
	DEV=$1
	iw dev ${DEV} del
	sleep 1s
}

function ahdemo_config()
{
	DEV=$1
	PHY=$2
	CHAN=$3
	
	echo "Creating an adhoc interface $PHY $DEV"

	iw phy $PHY interface add $DEV type adhoc
	ip link set ${DEV} down
	sleep 1s
        mod=`ifconfig ${DEV} | grep HWaddr | awk -F' ' '{print $5}' | awk -F':' '{ print "0A:"$2":"$3":"$4":"$5":"$6 }'`
        ip link set dev $DEV address $mod
	sleep 1s
	iw phy $PHY set txpower fixed 1600
	#iw phy $PHY set distance 2200
	iw phy $PHY set coverage 30
	iw phy $PHY set rts 576	
}

function ap_config()
{
	DEV=$1
	PHY=$2
	MODE=$3
	CHAN=$4
	INF=$5

	echo "Creating an AP interface $PHY $DEV $MODE $CHAN"

	# Create a new device, station mode, hostapd does the remaining (ath5k and ath9k do not allow the use of ap anymore, hostapd is used instead)
	iw phy $PHY interface add $DEV type station
	# Change the mac address
	sleep 1s
	echo "Starting hostapd for $DEV"
	# Hostapd, create the config file
	echo "interface=${DEV}" > /tmp/${DEV}.conf 
	echo "ssid=$SITENO-${INF}" >> /tmp/${DEV}.conf      
	echo "channel=$CHAN" >> /tmp/${DEV}.conf
	if [ $MODE = "11g" ]; then
		echo "hw_mode=g" >> /tmp/${DEV}.conf	
	fi
        if [ $MODE = "11a" ]; then                              
	        echo "hw_mode=a" >> /tmp/${DEV}.conf            
        fi 
	# Mac address filtering, disabled in this testing phase!
	echo "macaddr_acl=1" >> /tmp/${DEV}.conf
	echo "accept_mac_file=/etc/mac_whitelist" >> /tmp/${DEV}.conf

	# Start hostapd
	hostapd /tmp/${DEV}.conf -B
	sleep 1s
}

function ahdemo_up()
{
	DEV=$1
	IP=$2
	MASK=$3
	MASK2=$4
	MODE=$5
	CHAN=$6

	echo "UP an adhoc interface $DEV $IP $MASK $MASK2 $CHAN $MODE"

	ip addr add $IP/$MASK dev ${DEV} brd ${MASK2}
	ip link set ${DEV} up

	sleep 1s
  
	getfreq $CHAN $MODE
	echo "Operating at freq $freq"
	iw dev $DEV ibss join "qurinet" $freq HT20 fixed-freq 22:22:22:22:22:22
	
}

function bridge_up()
{
	echo "UP bridge $IP_BR0 $MASK_BR0"
       	# eth0
	ifconfig eth0 0.0.0.0 promisc up
       	ip link set eth0 up
			
	if [ $AP0 -eq 1 ]; then
		ifconfig wifi0 0.0.0.0 promisc up
		ip link set wifi0 up
	fi

	if [ $AP1 -eq 1 ]; then
		ifconfig wifi1 0.0.0.0 promisc up
		ip link set wifi1 up
	fi

	brctl addbr br0
	brctl addif br0 eth0

	if [ $AP0 -eq 1 ]; then
		brctl addif br0 wifi0
	fi
	if [ $AP1 -eq 1 ]; then
		brctl addif br0 wifi1
	fi
	sleep 1s
       	
	ip addr add $IP_BR0/$MASK_BR0 dev br0 brd ${BRD_BR0}
	ip link set br0 up

	if [ -n "${IP_BR0_1+x}" ]; then
		echo "Setting up BR0:1 $IP_BR0_1"
		ifconfig br0:1 $IP_BR0_1 netmask $MASK_BR0_1 broadcast ${BRD_BR0_1}
	fi
		
	sleep 1s
}

function bridge_down()
{
	ip link set br0 down
	if [ $AP0 -eq 1 ]; then
		ip link set wifi0 down
	fi

	if [ $AP1 -eq 1 ]; then
		ip link set wifi1 down
	fi
	ip link set eth0 down
	sleep 1s
}

function bridge_destroy()
{
	brctl delif br0 eth0
	
	if [ $AP0 -eq 1 ]; then
		brctl delif br0 wifi0
	fi
	if [ $AP1 -eq 1 ]; then
		brctl delif br0 wifi1
	fi
	
	brctl delbr br0
	sleep 1s
}


case "${1}" in
	start)
		echo "Starting custom network script"

		sleep 1s

		# wireless configuration
		if [ $WIFI0 -eq 1 ]; then
			WIFI="phy0"
			if [ $AHDEMO0 -eq 1 ]; then
				ahdemo_config "adhoc0" $WIFI $WIFI0_CHAN
				ahdemo_up "adhoc0" $IP_AHDEMO0 $MASK_AHDEMO0 $BRD_AHDEMO0 $WIFI0_MODE $WIFI0_CHAN
			fi
			sleep 60
			if [ $AP0 -eq 1 ]; then
				ap_config "wifi0" $WIFI $WIFI0_MODE $WIFI0_CHAN "0"
			fi
		fi

       		if [ $WIFI1 -eq 1 ]; then
			WIFI="phy1"
			if [ $AHDEMO1 -eq 1 ]; then
				ahdemo_config "adhoc1" $WIFI $WIFI1_CHAN
				ahdemo_up "adhoc1" $IP_AHDEMO1 $MASK_AHDEMO1 $BRD_AHDEMO1 $WIFI1_MODE $WIFI1_CHAN
			fi
			if [ $AP1 -eq 1 ]; then
				ap_config "wifi1" $WIFI $WIFI1_MODE $WIFI1_CHAN "1"
			fi
		fi
		
		# bridge config, deprecated
		bridge_up

		# dhcp
		if [ $DHCPD -eq 1 ]; then
			killall dnsmasq
			cp /etc/dnsmasq.conf.base /etc/dnsmasq.conf
			touch /tmp/dnsmasq.leases
			echo "dhcp-range=br0,$IP_PREFIX.$SITENO.100.100,$IP_PREFIX.$SITENO.100.199,12h" >> /etc/dnsmasq.conf
			dnsmasq
		fi

		if [ $OLSRD -eq 1 ]; then
			killall olsrd
			cp /etc/olsrd.conf.base /etc/olsrd.conf
			echo "Hna4 {" >> /etc/olsrd.conf
			echo "$IP_PREFIX.$SITENO.0.0 255.255.0.0" >> /etc/olsrd.conf
			echo "}" >> /etc/olsrd.conf
			olsrd -f /etc/olsrd.conf -d 0
		else
			# 13 (def)
			route add 10.0.13.2 gw 10.0.13.2 dev adhoc0 
			route add 10.0.13.3 gw 10.0.13.2 dev adhoc0 
			route add 10.13.1.1 gw 10.0.13.2 dev adhoc0
			route add -net 10.13.0.0 netmask 255.255.0.0 gw 10.0.13.2 dev adhoc0
			route add -net 10.0.0.0 netmask 255.255.0.0 gw 10.0.13.2 dev adhoc0
			route add -net 10.0.0.0 netmask 255.0.0.0 gw 10.0.13.2 dev adhoc0
			route add default netmask 255.0.0.0 gw 10.0.13.2 dev adhoc0
		fi

		# iptables
		iptables -F INPUT
		iptables -F OUTPUT
		iptables -F FORWARD
		iptables -P INPUT ACCEPT
		iptables -P OUTPUT ACCEPT
		iptables -P FORWARD ACCEPT
		iptables -A FORWARD -i adhoc0 -o br0 -j ACCEPT
		iptables -A FORWARD -i adhoc1 -o br0 -j ACCEPT
		iptables -A FORWARD -i br0 -o adhoc0 -j ACCEPT
		iptables -A FORWARD -i br0 -o adhoc1 -j ACCEPT
		iptables -A FORWARD -i br0 -o br0 -j ACCEPT
		iptables -A FORWARD -i adhoc0 -o adhoc1 -j ACCEPT
		iptables -A FORWARD -i adhoc1 -o adhoc0 -j ACCEPT
		;;

	stop)
		echo "Stopping custom network script"

		if [ $AHDEMO0 -eq 1 ]; then
			ip link set adhoc0 down
       		fi
		
		if [ $AHDEMO1 -eq 1 ]; then
			ip link set adhoc1 down
       		fi

		# bridge
		bridge_down
		bridge_destroy

		killall hostapd

       		if [ $AHDEMO0 -eq 1 ]; then
			wifi_destroy "adhoc0"
		fi
       		if [ $AP0 -eq 1 ]; then
			wifi_destroy "wifi0"
		fi
       		if [ $AHDEMO1 -eq 1 ]; then
			wifi_destroy "adhoc1"
		fi
       		if [ $AP1 -eq 1 ]; then
			wifi_destroy "wifi1"
		fi

		# bring down dhcpd
		if [ $DHCPD -eq 1 ]; then
			killall dnsmasq
		fi

		if [ $OLSRD -eq 1 ]; then
			killall olsrd
		fi
		
		;;

	reload)
		echo "Reloading custom network script"
		;;

	restart)
		${0} stop
		sleep 1
		${0} start
		;;

	status)
		statusproc
		;;

	*)
		echo "Usage: ${0} {start|stop|reload|restart|status}"
		exit 1
		;;
esac

# End $rc_base/init.d/
